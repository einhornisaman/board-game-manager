<?php
/**
 * Admin functionality for Board Game Manager
 */
class BGM_Admin {
    /**
 * Constructor - register admin hooks
 */
public function __construct() {
    add_action('admin_menu', array($this, 'register_menu'));
    add_action('wp_ajax_bgm_search_games_ajax', array($this, 'ajax_search_games_ajax'));
}
    
    /**
     * Register admin menu items
     */
    public function register_menu() {
        add_menu_page(
            'Board Game Manager',
            'Board Games',
            'manage_options',
            'board-game-manager',
            array($this, 'admin_page'),
            'dashicons-games',
            30
        );
        
        add_submenu_page(
            'board-game-manager',
            'Add/Remove Games',
            'Add/Remove Games',
            'manage_options',
            'bgm-add-remove',
            array($this, 'add_remove_page')
        );

        add_submenu_page(
            'board-game-manager',
            'Edit Games',
            'Edit Games',
            'manage_options',
            'bgm-edit-games',
            array($this, 'edit_games_page')
        );
    }
    
    /**
     * Display main admin page
     */
    public function admin_page() {
        include BGM_PLUGIN_DIR . 'admin/views/admin-page.php';
    }
    
    /**
     * Display add/remove games page
     */
    public function add_remove_page() {
        // Process BGG search if form submitted
        if (isset($_POST['bgg_search_term']) && !empty($_POST['bgg_search_term'])) {
            $search_term = sanitize_text_field($_POST['bgg_search_term']);
            $search_results = $this->search_bgg_games($search_term);
        }
        
        // Process game addition
        if (isset($_POST['add_game_id']) && !empty($_POST['add_game_id'])) {
            $bgg_id = intval($_POST['add_game_id']);
            $result = BGM_BGG_API::import_game($bgg_id);
        }
        
        // Process game deletion
        if (isset($_POST['delete_game_id']) && !empty($_POST['delete_game_id'])) {
            $game_id = intval($_POST['delete_game_id']);
            $delete_result = $this->delete_game($game_id);
        }
        
        include BGM_PLUGIN_DIR . 'admin/views/add-remove-page.php';
    }
    
/**
 * Search BGG for games
 */
private function search_bgg_games($search_term) {
    $search_term = urlencode($search_term);
    $search_url = "https://boardgamegeek.com/xmlapi2/search?type=boardgame,boardgameexpansion&query=$search_term";
    
    $response = wp_remote_get($search_url);
    
    if (is_wp_error($response)) {
        return array(
            'success' => false,
            'message' => 'Failed to connect to BoardGameGeek API: ' . $response->get_error_message()
        );
    }
    
    $body = wp_remote_retrieve_body($response);
    
    // Process XML
    libxml_use_internal_errors(true);
    $xml = simplexml_load_string($body);
    
    if ($xml === false) {
        return array(
            'success' => false,
            'message' => 'Failed to parse BoardGameGeek API response.'
        );
    }
    
    $total = (int)$xml['total'];
    
    if ($total === 0) {
        return array(
            'success' => false,
            'message' => 'No games found matching your search term.'
        );
    }
    
    $game_ids = array();
    $temp_results = array();
    
    // First, collect all game IDs and basic info
    foreach ($xml->item as $item) {
        $game_id = (string)$item['id'];
        $name = "";
        
        // Find primary name
        foreach ($item->name as $name_node) {
            if ((string)$name_node['type'] === 'primary') {
                $name = (string)$name_node['value'];
                break;
            }
        }
        
        // If no primary name found, use the first name
        if (empty($name) && isset($item->name[0])) {
            $name = (string)$item->name[0]['value'];
        }
        
        // Year published
        $year = (isset($item->yearpublished)) ? (string)$item->yearpublished['value'] : 'N/A';
        
        // Add to temp results if we have a name
        if (!empty($name)) {
            $temp_results[$game_id] = array(
                'id' => $game_id,
                'name' => $name,
                'year' => $year,
                'thumbnail' => '' // Will be populated in the next step
            );
            
            $game_ids[] = $game_id;
        }
    }
    
    // Now, if we have games, fetch their details to get thumbnails
    if (!empty($game_ids)) {
        $batch_size = 10;
        $batches = array_chunk($game_ids, $batch_size);
        
        foreach ($batches as $batch) {
            $ids_string = implode(',', $batch);
            $thing_url = "https://boardgamegeek.com/xmlapi2/thing?id=$ids_string";
            
            $thing_response = wp_remote_get($thing_url);
            
            if (!is_wp_error($thing_response)) {
                $thing_body = wp_remote_retrieve_body($thing_response);
                $thing_xml = simplexml_load_string($thing_body);
                
                if ($thing_xml !== false) {
                    foreach ($thing_xml->item as $item) {
                        $id = (string)$item['id'];
                        $thumbnail = isset($item->thumbnail) ? (string)$item->thumbnail : '';
                        
                        if (isset($temp_results[$id])) {
                            $temp_results[$id]['thumbnail'] = $thumbnail;
                        }
                    }
                }
            }
        }
    }
    
    // Format the final results
    $results = array();
    foreach ($temp_results as $result) {
        $results[] = $result;
    }
    
    return array(
        'success' => true,
        'games' => $results
    );
}
    
    /**
     * Delete game by BGG ID
     */
    private function delete_game($bgg_id) {
        global $wpdb;
        $table_name = $wpdb->prefix . 'bgm_games';
        
        // Get the game name first for confirmation message
        $game = $wpdb->get_row($wpdb->prepare("SELECT id, name FROM $table_name WHERE bgg_id = %d", $bgg_id));
        
        if ($game) {
            // Delete the game
            $result = $wpdb->delete(
                $table_name,
                array('bgg_id' => $bgg_id),
                array('%d')
            );
            
            if ($result) {
                return array(
                    'success' => true,
                    'message' => sprintf('Game "%s" has been deleted successfully.', $game->name)
                );
            } else {
                return array(
                    'success' => false,
                    'message' => 'Error deleting game: ' . $wpdb->last_error
                );
            }
        } else {
            return array(
                'success' => false,
                'message' => sprintf('Game with ID %d not found.', $bgg_id)
            );
        }
    }

/**
 * Display edit games page
 */
public function edit_games_page() {
    // Process form submission for updating game
    if (isset($_POST['edit_game_submit']) && isset($_POST['game_id']) && !empty($_POST['game_id'])) {
        $game_id = intval($_POST['game_id']);
        $update_result = $this->update_game($game_id, $_POST);
    }
    
    // If a specific game ID is requested for editing via GET parameter
    if (isset($_GET['game_id']) && !empty($_GET['game_id'])) {
        $game_id = intval($_GET['game_id']);
        $game = $this->get_game($game_id);
    }
    // If a specific game ID is requested for editing via POST parameter
    elseif (isset($_POST['select_game_id']) && !empty($_POST['select_game_id'])) {
        $game_id = intval($_POST['select_game_id']);
        $game = $this->get_game($game_id);
    }
    
    include BGM_PLUGIN_DIR . 'admin/views/edit-games-page.php';
}

/**
 * Get a single game by ID
 */
private function get_game($game_id) {
    global $wpdb;
    $table_name = $wpdb->prefix . 'bgm_games';
    
    $game = $wpdb->get_row(
        $wpdb->prepare("SELECT * FROM $table_name WHERE id = %d", $game_id),
        ARRAY_A
    );
    
    return $game;
}

/**
 * Update game data
 */
private function update_game($game_id, $data) {
    global $wpdb;
    $table_name = $wpdb->prefix . 'bgm_games';
    
    // Sanitize and prepare data
    $update_data = array(
        'name' => sanitize_text_field($data['name']),
        'thumb' => esc_url_raw($data['thumb']),
        'minplayers' => intval($data['minplayers']),
        'maxplayers' => intval($data['maxplayers']),
        'minplaytime' => intval($data['minplaytime']),
        'maxplaytime' => intval($data['maxplaytime']),
        'complexity' => floatval($data['complexity']),
        'gamecats' => sanitize_text_field($data['gamecats']),
        'gamemechs' => sanitize_text_field($data['gamemechs']),
        'bgglink' => esc_url_raw($data['bgglink']),
        'rating' => floatval($data['rating']),
        'qty' => intval($data['qty']),
        'qtyrented' => intval($data['qtyrented']),
        'description' => wp_kses_post($data['description']),
        'year_published' => intval($data['year_published']),
        'publisher' => sanitize_text_field($data['publisher']),
        'designer' => sanitize_text_field($data['designer']),
        'last_updated' => current_time('mysql')
    );
    
    // Update the database
    $result = $wpdb->update(
        $table_name,
        $update_data,
        array('id' => $game_id),
        array(
            '%s', '%s', '%d', '%d', '%d', '%d', '%f', '%s', '%s', '%s', '%f', 
            '%d', '%d', '%s', '%d', '%s', '%s', '%s'
        ),
        array('%d')
    );
    
    if ($result !== false) {
        return array(
            'success' => true,
            'message' => 'Game updated successfully.'
        );
    } else {
        return array(
            'success' => false,
            'message' => 'Error updating game: ' . $wpdb->last_error
        );
    }
}
    
/**
 * AJAX handler for real-time game search with images
 */
public function ajax_search_games_ajax() {
    // Verify nonce
    check_ajax_referer('bgm_search_nonce', 'security');
    
    $search = isset($_GET['term']) ? sanitize_text_field($_GET['term']) : '';
    
    if (empty($search)) {
        wp_send_json(array(
            'success' => false,
            'message' => 'Search term is empty.'
        ));
        return;
    }
    
    global $wpdb;
    $table_name = $wpdb->prefix . 'bgm_games';
    
    // Get games matching the search term with thumbnails
    $games = $wpdb->get_results($wpdb->prepare(
        "SELECT id, name, thumb, year_published, minplayers, maxplayers FROM $table_name 
         WHERE name LIKE %s 
         ORDER BY name 
         LIMIT 12",
        '%' . $wpdb->esc_like($search) . '%'
    ));
    
    if ($wpdb->last_error) {
        wp_send_json(array(
            'success' => false,
            'message' => 'Database error: ' . $wpdb->last_error
        ));
        return;
    }
    
    $results = array();
    foreach ($games as $game) {
        $results[] = array(
            'id' => $game->id,
            'name' => $game->name,
            'thumb' => $game->thumb,
            'year' => $game->year_published,
            'players' => $game->minplayers . '-' . $game->maxplayers
        );
    }
    
    wp_send_json(array(
        'success' => true,
        'count' => count($results),
        'data' => $results
    ));
}



}

// Initialize the admin
new BGM_Admin();