<?php
/**
 * Plugin Name: Board Game Manager Simple
 * Description: Simplified version with basic BGG integration
 * Version: 1.0.0
 * Author: Your Name
 * Text Domain: board-game-manager
 */

// If this file is called directly, abort.
if (!defined('WPINC')) {
    die;
}

// Define plugin constants
define('BGM_VERSION', '1.0.0');
define('BGM_PLUGIN_DIR', plugin_dir_path(__FILE__));
define('BGM_PLUGIN_URL', plugin_dir_url(__FILE__));

/**
 * Plugin Activation
 */
function bgm_activate() {
    global $wpdb;
    $charset_collate = $wpdb->get_charset_collate();
    
    // Define table name
    $games_table = $wpdb->prefix . 'bgm_games';
    
    // Include WordPress database upgrade functions
    require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
    
    // Create games table
    $sql = "CREATE TABLE $games_table (
        `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
        `name` varchar(255) NOT NULL,
        `thumb` varchar(255) DEFAULT NULL,
        `minplayers` int(11) DEFAULT NULL,
        `maxplayers` int(11) DEFAULT NULL,
        `minplaytime` int(11) DEFAULT NULL,
        `maxplaytime` int(11) DEFAULT NULL,
        `complexity` decimal(3,2) DEFAULT NULL,
        `gamecats` text DEFAULT NULL,
        `gamemechs` text DEFAULT NULL,
        `bgglink` varchar(255) DEFAULT NULL,
        `rating` decimal(3,1) DEFAULT NULL,
        `qty` int(11) DEFAULT 1,
        `qtyrented` int(11) DEFAULT 0,
        `bgg_id` int(11) DEFAULT NULL,
        PRIMARY KEY (`id`),
        UNIQUE KEY `bgg_id` (`bgg_id`)
    ) $charset_collate;";
    
    dbDelta($sql);
}
register_activation_hook(__FILE__, 'bgm_activate');

/**
 * Import a game from BoardGameGeek API and save to database
 */
function bgm_import_game_from_bgg($bgg_id) {
    global $wpdb;
    $table_name = $wpdb->prefix . 'bgm_games';
    
    // Check if game already exists
    $existing = $wpdb->get_var($wpdb->prepare("SELECT id FROM $table_name WHERE bgg_id = %d", $bgg_id));
    
    // Simple API call with basic error handling
    $url = 'https://boardgamegeek.com/xmlapi2/thing?stats=1&id=' . $bgg_id;
    $response = wp_remote_get($url);
    
    if (is_wp_error($response)) {
        return [
            'success' => false,
            'message' => "Failed to connect to BGG API: " . $response->get_error_message()
        ];
    }
    
    $body = wp_remote_retrieve_body($response);
    
    // Process XML
    libxml_use_internal_errors(true);
    $xml = simplexml_load_string($body);
    
    if ($xml === false) {
        return [
            'success' => false,
            'message' => "Failed to parse BGG API response."
        ];
    }
    
    // Extract basic game data
    try {
        $id = (string)$xml->item->attributes()->id;
        $name = (string)$xml->item->name[0]->attributes()->value;
        $thumbnail = (string)$xml->item->thumbnail;
        $minplayers = (string)$xml->item->minplayers['value'];
        $maxplayers = (string)$xml->item->maxplayers['value'];
        $minplaytime = (string)$xml->item->minplaytime['value'];
        $maxplaytime = (string)$xml->item->maxplaytime['value'];
        $complexity = (string)$xml->item->statistics->ratings->averageweight['value'];
        $rating = (string)$xml->item->statistics->ratings->average['value'];
        $bgglink = 'https://boardgamegeek.com/boardgame/' . $id;
        
        // Extract categories and mechanics
        $catNames = "";
        $mechNames = "";
        
        foreach ($xml->item->link as $link) {
            if ((string)$link->attributes()->type == "boardgamecategory") {
                $catNames .= (string)$link->attributes()->value . ", ";
            } elseif ((string)$link->attributes()->type == "boardgamemechanic") {
                $mechNames .= (string)$link->attributes()->value . ", ";
            }
        }

        // Remove the trailing ", " from the category and mechanic names
        $catNames = rtrim($catNames, ", ");
        $mechNames = rtrim($mechNames, ", ");
        
        // Insert or update the game in database
        if ($existing) {
            // Update existing game
            $result = $wpdb->update(
                $table_name,
                [
                    'name' => $name,
                    'thumb' => $thumbnail,
                    'minplayers' => $minplayers,
                    'maxplayers' => $maxplayers,
                    'minplaytime' => $minplaytime,
                    'maxplaytime' => $maxplaytime,
                    'complexity' => $complexity,
                    'gamecats' => $catNames,
                    'gamemechs' => $mechNames,
                    'bgglink' => $bgglink,
                    'rating' => $rating,
                    'bgg_id' => $id
                ],
                ['id' => $existing]
            );
            
            if ($result === false) {
                return [
                    'success' => false,
                    'message' => "Database error: " . $wpdb->last_error
                ];
            }
            
            $action = "updated";
            
        } else {
            // Insert new game
            $result = $wpdb->insert(
                $table_name,
                [
                    'name' => $name,
                    'thumb' => $thumbnail,
                    'minplayers' => $minplayers,
                    'maxplayers' => $maxplayers,
                    'minplaytime' => $minplaytime,
                    'maxplaytime' => $maxplaytime,
                    'complexity' => $complexity,
                    'gamecats' => $catNames,
                    'gamemechs' => $mechNames,
                    'bgglink' => $bgglink,
                    'rating' => $rating,
                    'qty' => 1,
                    'qtyrented' => 0,
                    'bgg_id' => $id
                ]
            );
            
            if ($result === false) {
                return [
                    'success' => false,
                    'message' => "Database error: " . $wpdb->last_error
                ];
            }
            
            $action = "added";
        }
        
        return [
            'success' => true,
            'action' => $action,
            'id' => $id,
            'name' => $name,
            'thumbnail' => $thumbnail,
            'minplayers' => $minplayers,
            'maxplayers' => $maxplayers,
            'minplaytime' => $minplaytime,
            'maxplaytime' => $maxplaytime,
            'complexity' => $complexity,
            'rating' => $rating,
            'catNames' => $catNames,
            'mechNames' => $mechNames,
            'bgglink' => $bgglink
        ];
    } catch (Exception $e) {
        return [
            'success' => false,
            'message' => "Error processing game data: " . $e->getMessage()
        ];
    }
}

/**
 * Admin Menu Setup
 */
function bgm_admin_menu() {
    add_menu_page(
        'Board Game Manager',
        'Board Games',
        'manage_options',
        'board-game-manager',
        'bgm_admin_page',
        'dashicons-games',
        30
    );
    
    add_submenu_page(
        'board-game-manager',
        'Import Game',
        'Import Game',
        'manage_options',
        'bgm-import',
        'bgm_import_page'
    );
}
add_action('admin_menu', 'bgm_admin_menu');

/**
 * Admin Page
 */
function bgm_admin_page() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'bgm_games';
    $games = $wpdb->get_results("SELECT * FROM $table_name ORDER BY name ASC", ARRAY_A);
    ?>
    <div class="wrap">
        <h1>Board Game Manager</h1>
        <p>Manage your board game collection here.</p>
        
        <?php if (empty($games)) : ?>
            <div class="notice notice-info">
                <p>No games found in your collection. <a href="<?php echo admin_url('admin.php?page=bgm-import'); ?>">Import games</a> to get started.</p>
            </div>
        <?php else : ?>
            <a href="<?php echo admin_url('admin.php?page=bgm-import'); ?>" class="button button-primary" style="margin-bottom: 15px;">Import More Games</a>
            
            <table class="wp-list-table widefat fixed striped">
                <thead>
                    <tr>
                        <th>Image</th>
                        <th>Name</th>
                        <th>Players</th>
                        <th>Playtime</th>
                        <th>Rating</th>
                    </tr>
                </thead>
                <tbody>
                    <?php foreach ($games as $game) : ?>
                        <tr>
                            <td><img src="<?php echo esc_url($game['thumb']); ?>" height="50" alt=""></td>
                            <td><?php echo esc_html($game['name']); ?></td>
                            <td><?php echo esc_html($game['minplayers'] . '-' . $game['maxplayers']); ?></td>
                            <td><?php echo esc_html($game['minplaytime'] . '-' . $game['maxplaytime']); ?></td>
                            <td><?php echo esc_html($game['rating']); ?></td>
                        </tr>
                    <?php endforeach; ?>
                </tbody>
            </table>
        <?php endif; ?>
    </div>
    <?php
}

/**
 * Import Page
 */
function bgm_import_page() {
    // Process form if submitted
    if (isset($_POST['bgg_id']) && !empty($_POST['bgg_id'])) {
        $bgg_id = intval($_POST['bgg_id']);
        $result = bgm_import_game_from_bgg($bgg_id);
        
        if ($result['success']) {
            echo '<div class="notice notice-success"><p>Game "' . esc_html($result['name']) . '" ' . esc_html($result['action']) . ' successfully!</p></div>';
        } else {
            echo '<div class="notice notice-error"><p>Error: ' . esc_html($result['message']) . '</p></div>';
        }
    }
    ?>
    <div class="wrap">
        <h1>Import Game</h1>
        <p>Enter a BoardGameGeek ID to import a game.</p>
        
        <form method="post" style="margin-bottom: 30px;">
            <input type="number" name="bgg_id" placeholder="BGG ID (e.g. 174430)" required>
            <button type="submit" class="button button-primary">Import Game</button>
        </form>
        
        <p>Examples of popular games:</p>
        <ul>
            <li>Catan: 13</li>
            <li>Ticket to Ride: 9209</li>
            <li>Pandemic: 30549</li>
            <li>7 Wonders: 68448</li>
            <li>Azul: 230802</li>
        </ul>
    </div>
    <?php
}

/**
 * Shortcode for displaying games
 */
function bgm_shortcode() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'bgm_games';
    $games = $wpdb->get_results("SELECT * FROM $table_name ORDER BY name ASC", ARRAY_A);
    
    ob_start();
    
    if (empty($games)) {
        echo '<p>No games found in the collection.</p>';
    } else {
        echo '<div class="bgm-games-grid" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 20px;">';
        
        foreach ($games as $game) {
            echo '<div class="bgm-game-card" style="border: 1px solid #ddd; border-radius: 5px; padding: 10px; text-align: center;">';
            echo '<img src="' . esc_url($game['thumb']) . '" style="height: 100px; margin-bottom: 10px;" alt="' . esc_attr($game['name']) . '">';
            echo '<h3 style="margin: 0 0 5px; font-size: 16px;">' . esc_html($game['name']) . '</h3>';
            echo '<p style="margin: 0; font-size: 14px;">' . esc_html($game['minplayers'] . '-' . $game['maxplayers']) . ' players | ' . esc_html($game['minplaytime'] . '-' . $game['maxplaytime']) . ' min</p>';
            echo '</div>';
        }
        
        echo '</div>';
    }
    
    return ob_get_clean();
}
add_shortcode('board_game_collection', 'bgm_shortcode');