<?php
/**
 * Plugin Name: Board Game Manager
 * Description: Manage and display board game collections for cafes.
 * Version: 1.0.0
 * Author: Your Name
 * Text Domain: board-game-manager
 */

// If this file is called directly, abort.
if (!defined('WPINC')) {
    die;
}

// Define plugin constants
define('BGM_VERSION', '1.0.0');
define('BGM_PLUGIN_DIR', plugin_dir_path(__FILE__));
define('BGM_PLUGIN_URL', plugin_dir_url(__FILE__));

/**
 * Plugin Activation
 */
function bgm_activate() {
    global $wpdb;
    $charset_collate = $wpdb->get_charset_collate();
    
    // Define table names
    $games_table = $wpdb->prefix . 'bgm_games';
    
    // Include WordPress database upgrade functions
    require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
    
    // Create games table
    $sql = "CREATE TABLE $games_table (
        `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
        `name` varchar(255) NOT NULL,
        `thumb` varchar(255) DEFAULT NULL,
        `minplayers` int(11) DEFAULT NULL,
        `maxplayers` int(11) DEFAULT NULL,
        `minplaytime` int(11) DEFAULT NULL,
        `maxplaytime` int(11) DEFAULT NULL,
        `complexity` decimal(3,2) DEFAULT NULL,
        `gamecats` text DEFAULT NULL,
        `gamemechs` text DEFAULT NULL,
        `bgglink` varchar(255) DEFAULT NULL,
        `rating` decimal(3,1) DEFAULT NULL,
        `qty` int(11) DEFAULT 1,
        `qtyrented` int(11) DEFAULT 0,
        `bgg_id` int(11) DEFAULT NULL,
        `description` text DEFAULT NULL,
        `year_published` int(11) DEFAULT NULL,
        `publisher` varchar(255) DEFAULT NULL,
        `designer` varchar(255) DEFAULT NULL,
        `date_added` datetime DEFAULT CURRENT_TIMESTAMP,
        `last_updated` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        `added_by` bigint(20) UNSIGNED DEFAULT NULL,
        PRIMARY KEY (`id`),
        UNIQUE KEY `bgg_id` (`bgg_id`),
        KEY `name` (`name`)
    ) $charset_collate;";
    
    dbDelta($sql);
}
register_activation_hook(__FILE__, 'bgm_activate');

/**
 * Plugin Deactivation
 */
function bgm_deactivate() {
    // Cleanup code if needed
}
register_deactivation_hook(__FILE__, 'bgm_deactivate');

/**
 * Import a game from BoardGameGeek API
 * 
 * @param int $bgg_id The BoardGameGeek game ID
 * @return array|WP_Error Result array or error
 */
function bgm_import_game_from_bgg($bgg_id) {
    global $wpdb;
    $table_name = $wpdb->prefix . 'bgm_games';
    
    // Check if game already exists
    $existing = $wpdb->get_var($wpdb->prepare("SELECT id FROM $table_name WHERE bgg_id = %d", $bgg_id));
    
    // Load game data from BGG API
    $url = 'https://boardgamegeek.com/xmlapi2/thing?stats=1&id=' . $bgg_id;
    $response = wp_remote_get($url);
    
    if (is_wp_error($response)) {
        return [
            'success' => false,
            'message' => "Failed to connect to BoardGameGeek API: " . $response->get_error_message()
        ];
    }
    
    $body = wp_remote_retrieve_body($response);
    $xml = simplexml_load_string($body);
    
    if ($xml === false) {
        return [
            'success' => false,
            'message' => "Failed to parse BGG API response. Please try again later."
        ];
    }
    
    try {
        // Parse data from the XML response
        $id = (string)$xml->item->attributes()->id;
        $name_actual = (string)$xml->item->name[0]->attributes()->value;
        $name = str_replace("'", "", $name_actual);
        $thumbnail = (string)$xml->item->thumbnail;
        $minplayers = (string)$xml->item->minplayers['value'];
        $maxplayers = (string)$xml->item->maxplayers['value'];
        $minplaytime = (string)$xml->item->minplaytime['value'];
        $maxplaytime = (string)$xml->item->maxplaytime['value'];
        $complexity_actual = (string)$xml->item->statistics->ratings->averageweight['value'];
        $complexity = round((float)$complexity_actual, 2);
        $rating_actual = (string)$xml->item->statistics->ratings->average['value'];
        $rating = round((float)$rating_actual, 2);
        $bgglink = 'https://boardgamegeek.com/boardgame/' . $id;
        $description = (string)$xml->item->description;
        $year_published = isset($xml->item->yearpublished) ? (string)$xml->item->yearpublished['value'] : '';
        
        // Extract categories and mechanics
        $catNames = "";
        $mechNames = "";
        
        foreach ($xml->item->link as $link) {
            if ((string)$link->attributes()->type == "boardgamecategory") {
                $catNames .= (string)$link->attributes()->value . ", ";
            } elseif ((string)$link->attributes()->type == "boardgamemechanic") {
                $mechNames .= (string)$link->attributes()->value . ", ";
            }
        }

        // Remove the trailing ", " from the category and mechanic names
        $catNames = rtrim($catNames, ", ");
        $mechNames = rtrim($mechNames, ", ");
        
        // Find designer and publisher
        $designer = "";
        $publisher = "";
        
        foreach ($xml->item->link as $link) {
            if ((string)$link->attributes()->type == "boardgamedesigner") {
                $designer .= (string)$link->attributes()->value . ", ";
            } elseif ((string)$link->attributes()->type == "boardgamepublisher") {
                $publisher .= (string)$link->attributes()->value . ", ";
            }
        }
        
        $designer = rtrim($designer, ", ");
        $publisher = rtrim($publisher, ", ");
        
        // Current user ID
        $user_id = get_current_user_id();
        
        // Insert or update the game in database
        if ($existing) {
            // Update existing game
            $result = $wpdb->update(
                $table_name,
                [
                    'name' => $name,
                    'thumb' => $thumbnail,
                    'minplayers' => $minplayers,
                    'maxplayers' => $maxplayers,
                    'minplaytime' => $minplaytime,
                    'maxplaytime' => $maxplaytime,
                    'complexity' => $complexity,
                    'gamecats' => $catNames,
                    'gamemechs' => $mechNames,
                    'bgglink' => $bgglink,
                    'rating' => $rating,
                    'bgg_id' => $id,
                    'description' => $description,
                    'year_published' => $year_published,
                    'publisher' => $publisher,
                    'designer' => $designer,
                    'last_updated' => current_time('mysql')
                ],
                ['id' => $existing],
                [
                    '%s', '%s', '%d', '%d', '%d', '%d', '%f', '%s', '%s', '%s', '%f', 
                    '%d', '%s', '%d', '%s', '%s', '%s'
                ],
                ['%d']
            );
            
            if ($result === false) {
                return [
                    'success' => false,
                    'message' => "Database error: " . $wpdb->last_error
                ];
            }
            
            $game_id = $existing;
            
        } else {
            // Insert new game
            $result = $wpdb->insert(
                $table_name,
                [
                    'name' => $name,
                    'thumb' => $thumbnail,
                    'minplayers' => $minplayers,
                    'maxplayers' => $maxplayers,
                    'minplaytime' => $minplaytime,
                    'maxplaytime' => $maxplaytime,
                    'complexity' => $complexity,
                    'gamecats' => $catNames,
                    'gamemechs' => $mechNames,
                    'bgglink' => $bgglink,
                    'rating' => $rating,
                    'qty' => 1,
                    'qtyrented' => 0,
                    'bgg_id' => $id,
                    'description' => $description,
                    'year_published' => $year_published,
                    'publisher' => $publisher,
                    'designer' => $designer,
                    'date_added' => current_time('mysql'),
                    'last_updated' => current_time('mysql'),
                    'added_by' => $user_id
                ],
                [
                    '%s', '%s', '%d', '%d', '%d', '%d', '%f', '%s', '%s', '%s', '%f', 
                    '%d', '%d', '%d', '%s', '%d', '%s', '%s', '%s', '%s', '%d'
                ]
            );
            
            if ($result === false) {
                return [
                    'success' => false,
                    'message' => "Database error: " . $wpdb->last_error
                ];
            }
            
            $game_id = $wpdb->insert_id;
        }
        
        return [
            'success' => true,
            'id' => $id,
            'game_id' => $game_id,
            'name' => $name,
            'thumbnail' => $thumbnail,
            'minplayers' => $minplayers,
            'maxplayers' => $maxplayers,
            'minplaytime' => $minplaytime,
            'maxplaytime' => $maxplaytime,
            'complexity' => $complexity,
            'rating' => $rating,
            'catNames' => $catNames,
            'mechNames' => $mechNames,
            'bgglink' => $bgglink,
            'description' => substr($description, 0, 255) . (strlen($description) > 255 ? '...' : ''),
            'year_published' => $year_published,
            'publisher' => $publisher,
            'designer' => $designer
        ];
        
    } catch (Exception $e) {
        return [
            'success' => false,
            'message' => "Error processing game data: " . $e->getMessage()
        ];
    }
}

/**
 * Search for games on BoardGameGeek
 * 
 * @param string $search_term Term to search for
 * @return array|WP_Error Array of games or WP_Error on failure
 */
function bgm_search_bgg_games($search_term) {
    $search_term = urlencode($search_term);
    $search_url = "https://boardgamegeek.com/xmlapi2/search?type=boardgame,boardgameexpansion&query=$search_term";
    
    $response = wp_remote_get($search_url);
    
    if (is_wp_error($response)) {
        return new WP_Error('api_error', 'Failed to connect to BoardGameGeek API: ' . $response->get_error_message());
    }
    
    $body = wp_remote_retrieve_body($response);
    
    if (empty($body)) {
        return new WP_Error('api_error', 'Empty response from BoardGameGeek API.');
    }
    
    $xml = simplexml_load_string($body);
    
    if ($xml === false) {
        return new WP_Error('xml_error', 'Failed to parse BoardGameGeek API response.');
    }
    
    $total = (int)$xml['total'];
    
    if ($total === 0) {
        return [];
    }
    
    $game_ids = [];
    $temp_results = [];
    
    // First, collect all game IDs and basic info
    foreach ($xml->item as $item) {
        $game_id = (string)$item['id'];
        $name = "";
        
        // Find primary name
        foreach ($item->name as $name_node) {
            if ((string)$name_node['type'] === 'primary') {
                $name = (string)$name_node['value'];
                break;
            }
        }
        
        // If no primary name found, use the first name
        if (empty($name) && isset($item->name[0])) {
            $name = (string)$item->name[0]['value'];
        }
        
        // Year published
        $year = (isset($item->yearpublished)) ? (string)$item->yearpublished['value'] : 'N/A';
        
        // Add to temp results if we have a name
        if (!empty($name)) {
            $temp_results[$game_id] = [
                'id' => $game_id,
                'name' => $name,
                'year' => $year,
                'thumbnail' => '' // Will be populated in the next step
            ];
            
            $game_ids[] = $game_id;
        }
    }
    
    // Now, if we have games, fetch their details to get thumbnails
    // We'll fetch in batches of 10 to avoid overwhelming the API
    if (!empty($game_ids)) {
        $batch_size = 10;
        $batches = array_chunk($game_ids, $batch_size);
        
        foreach ($batches as $batch) {
            $ids_string = implode(',', $batch);
            $thing_url = "https://boardgamegeek.com/xmlapi2/thing?id=$ids_string";
            
            $thing_response = wp_remote_get($thing_url);
            
            if (!is_wp_error($thing_response)) {
                $thing_body = wp_remote_retrieve_body($thing_response);
                $thing_xml = simplexml_load_string($thing_body);
                
                if ($thing_xml !== false) {
                    foreach ($thing_xml->item as $item) {
                        $id = (string)$item['id'];
                        $thumbnail = isset($item->thumbnail) ? (string)$item->thumbnail : '';
                        
                        if (isset($temp_results[$id])) {
                            $temp_results[$id]['thumbnail'] = $thumbnail;
                        }
                    }
                }
            }
        }
    }
    
    // Format the final results
    $results = [];
    foreach ($temp_results as $result) {
        $results[] = $result;
    }
    
    return $results;
}

/**
 * Admin Menu Setup
 */
function bgm_admin_menu() {
    add_menu_page(
        'Board Game Manager',
        'Board Games',
        'manage_options',
        'board-game-manager',
        'bgm_admin_page',
        'dashicons-games',
        30
    );
    
    add_submenu_page(
        'board-game-manager',
        'Import Games',
        'Import Games',
        'manage_options',
        'bgm-import',
        'bgm_import_page'
    );
}
add_action('admin_menu', 'bgm_admin_menu');

/**
 * Admin Page
 */
function bgm_admin_page() {
    ?>
    <div class="wrap">
        <h1>Board Game Manager</h1>
        <p>Manage your board game collection here.</p>
        
        <?php
        global $wpdb;
        $table_name = $wpdb->prefix . 'bgm_games';
        $games = $wpdb->get_results("SELECT * FROM $table_name ORDER BY name ASC", ARRAY_A);
        ?>
        
        <?php if (empty($games)) : ?>
            <div class="notice notice-info">
                <p>No games found in your collection. <a href="<?php echo admin_url('admin.php?page=bgm-import'); ?>">Import games</a> to get started.</p>
            </div>
        <?php else : ?>
            <table class="wp-list-table widefat fixed striped">
                <thead>
                    <tr>
                        <th>Image</th>
                        <th>Name</th>
                        <th>Players</th>
                        <th>Playtime</th>
                        <th>Rating</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <?php foreach ($games as $game) : ?>
                        <tr>
                            <td><img src="<?php echo esc_url($game['thumb']); ?>" height="50" alt=""></td>
                            <td><?php echo esc_html($game['name']); ?></td>
                            <td><?php echo esc_html($game['minplayers'] . '-' . $game['maxplayers']); ?></td>
                            <td><?php echo esc_html($game['minplaytime'] . '-' . $game['maxplaytime']); ?></td>
                            <td><?php echo esc_html($game['rating']); ?></td>
                            <td>
                                <a href="#">Edit</a> | 
                                <a href="#" class="text-danger">Delete</a>
                            </td>
                        </tr>
                    <?php endforeach; ?>
                </tbody>
            </table>
        <?php endif; ?>
    </div>
    <?php
}

/**
 * Import Page for adding games from BoardGameGeek
 */
/**
 * Shortcode for displaying game collection
 */
function bgm_games_shortcode($atts) {
    // Enqueue necessary scripts and styles
    wp_enqueue_style('bootstrap', 'https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.0/css/bootstrap.min.css');
    wp_enqueue_style('datatables-bs5', 'https://cdn.datatables.net/2.2.2/css/dataTables.bootstrap5.min.css');
    wp_enqueue_style('datatables-responsive', 'https://cdn.datatables.net/responsive/3.0.4/css/responsive.bootstrap5.min.css');
    
    wp_enqueue_script('jquery');
    wp_enqueue_script('bootstrap-bundle', 'https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.3/js/bootstrap.bundle.min.js', array('jquery'), null, true);
    wp_enqueue_script('datatables', 'https://cdn.datatables.net/2.2.2/js/dataTables.min.js', array('jquery'), null, true);
    wp_enqueue_script('datatables-bs5', 'https://cdn.datatables.net/2.2.2/js/dataTables.bootstrap5.min.js', array('datatables'), null, true);
    wp_enqueue_script('datatables-responsive', 'https://cdn.datatables.net/responsive/3.0.4/js/dataTables.responsive.min.js', array('datatables'), null, true);
    wp_enqueue_script('datatables-responsive-bs5', 'https://cdn.datatables.net/responsive/3.0.4/js/responsive.bootstrap5.js', array('datatables-responsive'), null, true);
    wp_enqueue_script('datatables-accent', 'https://cdn.datatables.net/plug-ins/2.2.2/filtering/type-based/accent-neutralise.js', array('datatables'), null, true);
    
    // Custom filters script
    wp_enqueue_script('bgm-filters', BGM_PLUGIN_URL . 'js/filters.js', array('jquery', 'datatables'), BGM_VERSION, true);
    
    // Get games from database
    global $wpdb;
    $table_name = $wpdb->prefix . 'bgm_games';
    $games = $wpdb->get_results("SELECT * FROM $table_name", ARRAY_A);
    
    // Start output buffering
    ob_start();
    
    // Get game categories and mechanics for filter dropdowns
    $wpdb->query("SET @a:=0");
    $categories_query = "SELECT DISTINCT TRIM(value) AS value 
    FROM (
        SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(gamecats, ',', n.n), ',', -1) AS value
        FROM {$wpdb->prefix}bgm_games 
        CROSS JOIN (
            SELECT a.N
            FROM (
                SELECT @a:=@a+1 AS N
                FROM (
                    SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL 
                    SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1
                ) AS temp
                JOIN (SELECT @a:=0) AS init
            ) AS a
        ) AS n
        WHERE n.N <= 1 + (LENGTH(gamecats) - LENGTH(REPLACE(gamecats, ',', '')))
    ) AS subquery
    WHERE value <> ''
    ORDER BY value ASC";
    
    $wpdb->query("SET @a:=0");
    $mechanics_query = "SELECT DISTINCT TRIM(value) AS value 
    FROM (
        SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(gamemechs, ',', n.n), ',', -1) AS value
        FROM {$wpdb->prefix}bgm_games 
        CROSS JOIN (
            SELECT a.N
            FROM (
                SELECT @a:=@a+1 AS N
                FROM (
                    SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL 
                    SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1
                ) AS temp
                JOIN (SELECT @a:=0) AS init
            ) AS a
        ) AS n
        WHERE n.N <= 1 + (LENGTH(gamemechs) - LENGTH(REPLACE(gamemechs, ',', '')))
    ) AS subquery
    WHERE value <> ''
    ORDER BY value ASC";
    
    $game_categories = $wpdb->get_col($categories_query);
    $game_mechanics = $wpdb->get_col($mechanics_query);
    
    ?>
    <div class="container-fluid mb-3 mt-3">
        <h2 class="text-center my-4">Board Game Collection</h2>
        
        <section class="filters">
            <div class="row">
                <div class="col-12 col-sm-6 col-md-4">
                    <label for="filterPlayerCount">How many players do you have?
                        <select type="number" name="filterPlayerCount" class="form-select" id="filterPlayerCount" style="width:100%;">
                            <option value="">Any player count (all games)</option>
                            <option value="999">2 Player only games</option>
                            <option value="1">1</option>
                            <option value="2">2</option>
                            <option value="3">3</option>
                            <option value="4">4</option>
                            <option value="5">5</option>
                            <option value="6">6</option>
                            <option value="7">7</option>
                            <option value="8">8</option>
                            <option value="9">9</option>
                            <option value="10">10</option>
                            <option value="12">12+</option>
                        </select>
                    </label>
                </div>

                <div class="col-xs-12 col-sm-6 col-md-4">
                    <label for="filterComplexity">How complex of a game do you want to play?
                        <select name="filterComplexity" id="filterComplexity" class="form-select" style="width:100%;">
                            <option selected value="">Any complexity</option>
                            <option value="1">(1) Easy</option>
                            <option value="2">(2) Light</option>
                            <option value="3">(3) Medium Light</option>
                            <option value="4">(4) Medium</option>
                            <option value="5">(5) Medium Heavy</option>
                            <option value="6">(6) Heavy</option>
                        </select>
                    </label>
                    <input type="hidden" id="complexityMin" value="0">
                    <input type="hidden" id="complexityMax" value="9999">
                </div>

                <div class="col-xs-12 col-sm-6 col-md-4">
                    <label for="filterGameTime">How much time do you want to spend playing?
                        <select name="filterGameTime" id="filterGameTime" class="form-select" style="width:100%;">
                            <option selected value="">Any time</option>
                            <option value="1">1-15 minutes</option>
                            <option value="2">15-30 minutes</option>
                            <option value="3">30 Minutes-1 Hour</option>
                            <option value="4">1-2 Hours</option>
                            <option value="5">More than 2 hours</option>
                        </select>
                    </label>
                    <input type="hidden" id="min" value="0" />
                    <input type="hidden" id="max" value="9999" />
                </div>

                <div class="col-xs-12 col-sm-6 col-md-4">
                    <label for="filterCategory">What kind of game do you want to play?
                        <select name="filterCategory" id="filterCategory" class="form-select" style="width:100%;">
                            <option selected value="">Any category</option>
                            <?php foreach ($game_categories as $category) : ?>
                                <option value="<?php echo esc_attr($category); ?>"><?php echo esc_html($category); ?></option>
                            <?php endforeach; ?>
                        </select>
                    </label>
                </div>
                
                <div class="col-xs-12 col-sm-6 col-md-4">
                    <label for="filterMechanic">Do you have a favorite game mechanic?
                        <select name="filterMechanic" id="filterMechanic" class="form-select" style="width:100%;">
                            <option selected value="">Any mechanic</option>
                            <?php foreach ($game_mechanics as $mechanic) : ?>
                                <option value="<?php echo esc_attr($mechanic); ?>"><?php echo esc_html($mechanic); ?></option>
                            <?php endforeach; ?>
                        </select>
                    </label>
                </div>

                <div class="col-xs-12 col-sm-6 col-md-4 d-flex" style="justify-content: space-between; align-items: center">  
                    <label for="resetFilters">Want to start over?<br>
                        <button id="resetFilters" class="btn btn-outline-primary">Reset Filters</button> 
                    </label>
                </div>
            </div>
        </section>

        <div>
            <p class="text-center small mt-3">Click game image for more details</p>
        </div>

        <hr>
        
        <!-- Table structure -->
        <table class="display nowrap table table-striped table-bordered table-responsive table-sm mydatatable wrapper loading" style="width: 100%">
            <thead>
                <tr>
                    <th class="all text-center">Image</th>
                    <th class="all text-center">Name</th>
                    <th class="desktop text-center">Min Players</th>
                    <th class="desktop text-center">Max Players</th>
                    <th class="desktop text-center">Min Time</th>
                    <th class="desktop text-center">Max Time</th>
                    <th class="desktop text-center">Complexity (1-5)</th>
                    <th class="none text-center">Category</th>
                    <th class="none text-center">Mechanics</th>
                    <th class="none text-center">Info Link</th>
                    <th class="none text-center">Rating</th>
                    <th class="none text-center">Available to rent</th>
                    <th class="none text-center">Rented</th>
                </tr>
            </thead>
            <tbody>
                <?php foreach ($games as $game) : ?>
                    <tr class="game">
                        <td><img src="<?php echo esc_url($game['thumb']); ?>" height="100" alt="<?php echo esc_attr($game['name']); ?>"></td>
                        <td class="game__name"><?php echo esc_html($game['name']); ?></td>
                        <td class="text-center"><?php echo esc_html($game['minplayers']); ?></td>
                        <td class="text-center"><?php echo esc_html($game['maxplayers']); ?></td>
                        <td class="text-center"><?php echo esc_html($game['minplaytime']); ?></td>
                        <td class="text-center"><?php echo esc_html($game['maxplaytime']); ?></td>
                        <td class="text-center"><?php echo esc_html($game['complexity']); ?></td>
                        <td class="text-center"><font size="1"><?php echo esc_html($game['gamecats']); ?></font></td>
                        <td class="text-center"><font size="1"><?php echo esc_html($game['gamemechs']); ?></font></td>
                        <td class="text-center"><font size="1"><a href="<?php echo esc_url($game['bgglink']); ?>" target="_blank"><?php echo esc_url($game['bgglink']); ?></a></font></td>
                        <td class="text-center"><?php echo esc_html($game['rating']); ?></td>
                        <td class="text-center"><font size="1"><?php echo esc_html($game['qty']); ?></font></td>
                        <td class="text-center"><font size="1"><?php echo esc_html($game['qtyrented']); ?></font></td>
                    </tr>
                <?php endforeach; ?>
            </tbody>
        </table>
    </div>
    <?php
    
    // Return the buffered content
    return ob_get_clean();
}
add_shortcode('board_game_collection', 'bgm_games_shortcode');

/**
 * Create a folder for JavaScript files if it doesn't exist
 */
function bgm_create_js_folder() {
    $js_dir = BGM_PLUGIN_DIR . 'js';
    if (!file_exists($js_dir)) {
        mkdir($js_dir, 0755, true);
    }
}

/**
 * Create the filters.js file
 */
function bgm_create_js_files() {
    bgm_create_js_folder();
    
    $filters_js_path = BGM_PLUGIN_DIR . 'js/filters.js';
    
    if (!file_exists($filters_js_path)) {
        $filters_js_content = <<<'EOT'
// Board Game Manager filters script
jQuery(document).ready(function($) {
    // Define custom search functions first
    $.fn.dataTable.ext.search = []; // Clear any existing search functions
    
    $.fn.dataTable.ext.search.push(
        // Game Time Filter
        function (settings, data, dataIndex) {
            var iMin = parseInt($('#min').val(), 10);
            var iMax = parseInt($('#max').val(), 10);
        
            // Default values if input is empty or invalid
            iMin = isNaN(iMin) ? 0 : iMin;
            iMax = isNaN(iMax) ? 9999 : iMax;
        
            var minTime = parseInt(data[4], 10);
            var maxTime = parseInt(data[5], 10);
        
            // Default values for games with missing/invalid time data
            minTime = isNaN(minTime) ? 0 : minTime;
            if (isNaN(maxTime) || maxTime === 0) {
                maxTime = minTime; // If maxTime is 0 or missing, set it to minTime
            }
        
            // The game should be included if:
            // - Its min time is at least the selected min time
            // - Its max time does not exceed the selected max time
            if (minTime >= iMin && maxTime <= iMax) {
                return true;
            }
        
            return false;
        },
        
        // Player Count Filter
        function(settings, data, dataIndex) {
            var selectedPlayerCount = $('#filterPlayerCount').val();
            var minPlayers = parseInt(data[2], 10) || 0;
            var maxPlayers = parseInt(data[3], 10) || 0;
        
            if (!selectedPlayerCount || selectedPlayerCount === "") {
                return true;
            }
        
            if (selectedPlayerCount === "999") {
                return minPlayers === 2 && maxPlayers === 2;
            }
        
            selectedPlayerCount = parseInt(selectedPlayerCount, 10);
            return minPlayers <= selectedPlayerCount && maxPlayers >= selectedPlayerCount;
        },

        // Complexity Filter
        function (settings, data, dataIndex) {
            var complexityMin = parseFloat($('#complexityMin').val()) || 0;
            var complexityMax = parseFloat($('#complexityMax').val()) || 9999;
            var complexity = parseFloat(data[6]) || 0;

            if (complexityMin === 0 && complexityMax === 9999) {
                return true;
            }
            
            return (complexity >= complexityMin && complexity <= complexityMax);
        }
    );

    // Initialize DataTable
    var table = $('.mydatatable').DataTable({
        "language": {
            "infoFiltered": " of _MAX_"
        },
        "paging": true,
        "pagingType": $(window).width() < 768 ? "simple_numbers" : "simple_numbers",
        "processing": true,
        "responsive": true,
        "order": [[10, "desc"]],
        "initComplete": function(settings, json) {
            $('.wrapper').removeClass('loading');
        },
        "columnDefs": [
            { responsivePriority: 1, targets: 0 },
            { responsivePriority: 2, targets: 1 },
            { type: 'accent-neutralise', targets: 1 }
        ],
        "drawCallback": function(settings) {
            // Only scroll to top if the draw was triggered by pagination
            if (settings.iDraw > 1 && settings._iDisplayStart !== settings._iDisplayStart_) {
                window.scrollTo(0, 0); // Scroll to the top only on pagination change
            }
            // Store the current display start for future comparison
            settings._iDisplayStart_ = settings._iDisplayStart;
        }
    });

    // Player Count filter
    $('#filterPlayerCount').on('change', function() {
        table.draw();
    });

    // Complexity filter
    $('#filterComplexity').on('change', function() {
        switch($(this).val()) {
            case '1':
                $('#complexityMin').val('0');
                $('#complexityMax').val('1.49');
                break;
            case '2':
                $('#complexityMin').val('1.5');
                $('#complexityMax').val('1.99');
                break;
            case '3':
                $('#complexityMin').val('2');
                $('#complexityMax').val('2.49');
                break;
            case '4':
                $('#complexityMin').val('2.5');
                $('#complexityMax').val('2.99');
                break;
            case '5':
                $('#complexityMin').val('3');
                $('#complexityMax').val('3.49');
                break;
            case '6':
                $('#complexityMin').val('3.5');
                $('#complexityMax').val('5');
                break;
            default:
                $('#complexityMin').val('0');
                $('#complexityMax').val('9999');
                break;
        }
        table.draw();
    });

    // Game Time filter
    $('#filterGameTime').on('change', function() {
        switch($(this).val()) {
            case '1':
                $('#min').val('0');
                $('#max').val('15');
                break;
            case '2':
                $('#min').val('15');
                $('#max').val('30');
                break;
            case '3':
                $('#min').val('30');
                $('#max').val('60');
                break;
            case '4':
                $('#min').val('60');
                $('#max').val('120');
                break;
            case '5':
                $('#min').val('120');
                $('#max').val('9999');
                break;
            default:
                $('#min').val('0');
                $('#max').val('9999');
                break;
        }
        table.draw();
    });

    // Category filter
    $('#filterCategory').on('change', function() {
        table.column(7).search($(this).val()).draw();
    });

    // Mechanic filter
    $('#filterMechanic').on('change', function() {
        table.column(8).search($(this).val()).draw();
    });

    // Reset all filters
    $('#resetFilters').on('click', function() {
        // Reset all select dropdowns
        $('#filterPlayerCount, #filterComplexity, #filterGameTime, #filterCategory, #filterMechanic').val('');
        
        // Reset hidden range values
        $('#min, #complexityMin').val('0');
        $('#max, #complexityMax').val('9999');
        
        // Clear all column searches and redraw
        table.search('').columns().search('').draw();

        // Reset sorting to default (remove any active sorting)
        table.order([10, 'desc']).draw();
    });
});
EOT;
        
        file_put_contents($filters_js_path, $filters_js_content);
    }
}

// Create necessary files on plugin activation
register_activation_hook(__FILE__, 'bgm_create_js_files');

    // Process form submission
    if (isset($_POST['import_bgg']) && isset($_POST['bgg_id']) && !empty($_POST['bgg_id'])) {
        $bgg_id = intval($_POST['bgg_id']);
        $result = bgm_import_game_from_bgg($bgg_id);
    } elseif (isset($_POST['bgg_search_term']) && !empty($_POST['bgg_search_term'])) {
        $search_term = sanitize_text_field($_POST['bgg_search_term']);
        $search_results = bgm_search_bgg_games($search_term);
    }
    ?>
    <div class="wrap">
        <h1>Import Games from BoardGameGeek</h1>
        
        <?php if (isset($result)): ?>
            <?php if ($result['success']): ?>
                <div class="notice notice-success is-dismissible">
                    <p>Game "<?php echo esc_html($result['name']); ?>" was successfully imported!</p>
                </div>
                
                <div class="card" style="max-width: 800px; padding: 20px; margin-top: 20px;">
                    <h2><?php echo esc_html($result['name']); ?></h2>
                    
                    <div style="display: flex; margin-bottom: 20px;">
                        <div style="margin-right: 20px;">
                            <img src="<?php echo esc_url($result['thumbnail']); ?>" alt="<?php echo esc_attr($result['name']); ?>" style="max-width: 200px;">
                        </div>
                        <div>
                            <p><strong>Game ID:</strong> <?php echo esc_html($result['id']); ?></p>
                            <p><strong>Players:</strong> <?php echo esc_html($result['minplayers']); ?> - <?php echo esc_html($result['maxplayers']); ?></p>
                            <p><strong>Playtime:</strong> <?php echo esc_html($result['minplaytime']); ?> - <?php echo esc_html($result['maxplaytime']); ?> minutes</p>
                            <p><strong>Complexity:</strong> <?php echo esc_html($result['complexity']); ?> / 5</p>
                            <p><strong>Rating:</strong> <?php echo esc_html($result['rating']); ?> / 10</p>
                            <p><strong>Year Published:</strong> <?php echo esc_html($result['year_published']); ?></p>
                            <p><strong>Publisher:</strong> <?php echo esc_html($result['publisher']); ?></p>
                            <p><strong>Designer:</strong> <?php echo esc_html($result['designer']); ?></p>
                            <p><strong>Categories:</strong> <?php echo esc_html($result['catNames']); ?></p>
                            <p><strong>Mechanics:</strong> <?php echo esc_html($result['mechNames']); ?></p>
                            <p><a href="<?php echo esc_url($result['bgglink']); ?>" target="_blank">View on BoardGameGeek</a></p>
                        </div>
                    </div>
                    
                    <?php if (!empty($result['description'])): ?>
                        <div>
                            <h3>Game Description</h3>
                            <p><?php echo esc_html($result['description']); ?></p>
                        </div>
                    <?php endif; ?>
                    
                    <p><a href="<?php echo admin_url('admin.php?page=bgm-import'); ?>" class="button">Import Another Game</a></p>
                </div>
                
            <?php else: ?>
                <div class="notice notice-error is-dismissible">
                    <p>Error: <?php echo esc_html($result['message']); ?></p>
                </div>
            <?php endif; ?>
            
        <?php elseif (isset($search_results)): ?>
            
            <?php if (is_wp_error($search_results)): ?>
                <div class="notice notice-error is-dismissible">
                    <p>Error: <?php echo esc_html($search_results->get_error_message()); ?></p>
                </div>
                
                <form method="post" style="margin-top: 20px;">
                    <input type="text" name="bgg_search_term" placeholder="Enter a game name to search" value="<?php echo esc_attr($search_term); ?>" class="regular-text">
                    <input type="submit" class="button button-primary" value="Search">
                </form>
                
            <?php elseif (empty($search_results)): ?>
                <div class="notice notice-warning is-dismissible">
                    <p>No games found matching your search term.</p>
                </div>
                
                <form method="post" style="margin-top: 20px;">
                    <input type="text" name="bgg_search_term" placeholder="Enter a game name to search" value="<?php echo esc_attr($search_term); ?>" class="regular-text">
                    <input type="submit" class="button button-primary" value="Search">
                </form>
                
            <?php else: ?>
                <h2>Search Results for "<?php echo esc_html($search_term); ?>"</h2>
                
                <table class="wp-list-table widefat fixed striped">
                    <thead>
                        <tr>
                            <th style="width: 120px;">Thumbnail</th>
                            <th>Game Name</th>
                            <th style="width: 100px;">Year</th>
                            <th style="width: 150px;">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <?php foreach ($search_results as $game): ?>
                            <tr>
                                <td>
                                    <?php if (!empty($game['thumbnail'])): ?>
                                        <img src="<?php echo esc_url($game['thumbnail']); ?>" alt="<?php echo esc_attr($game['name']); ?>" style="max-height: 80px; max-width: 100px;">
                                    <?php else: ?>
                                        <div style="width: 80px; height: 80px; background: #f0f0f0; display: flex; align-items: center; justify-content: center; text-align: center; font-size: 12px; color: #999;">No image</div>
                                    <?php endif; ?>
                                </td>
                                <td><?php echo esc_html($game['name']); ?></td>
                                <td><?php echo esc_html($game['year']); ?></td>
                                <td>
                                    <form method="post">
                                        <input type="hidden" name="bgg_id" value="<?php echo esc_attr($game['id']); ?>">
                                        <input type="submit" name="import_bgg" class="button button-primary" value="Import">
                                    </form>
                                </td>
                            </tr>
                        <?php endforeach; ?>
                    </tbody>
                </table>
                
                <p style="margin-top: 20px;">
                    <a href="<?php echo admin_url('admin.php?page=bgm-import'); ?>" class="button">New Search</a>
                </p>
            <?php endif; ?>
            
        <?php else: ?>
            <div class="card" style="max-width: 800px; padding: 20px;">
                <h2>Search for Games</h2>
                <p>Search for a game on BoardGameGeek to add to your collection.</p>
                
                <form method="post" style="margin-top: 20px;">
                    <input type="text" name="bgg_search_term" placeholder="Enter a game name to search" class="regular-text">
                    <input type="submit" class="button button-primary" value="Search">
                </form>
                
                <hr style="margin: 20px 0;">
                
                <h2>Import by BGG ID</h2>
                <p>If you know the BoardGameGeek ID of the game you want to add, you can import it directly.</p>
                
                <form method="post" style="margin-top: 20px;">
                    <input type="text" name="bgg_id" placeholder="Enter BGG ID (e.g. 174430)" class="regular-text">
                    <input type="submit" name="import_bgg" class="button button-primary" value="Import Game">
                </form>
            </div>
        <?php endif; ?>
    </div>
    <?php
}